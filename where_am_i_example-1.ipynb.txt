{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from tensorflow.python.keras import applications\n",
    "from tensorflow.python.keras.preprocessing.image import ImageDataGenerator\n",
    "from tensorflow.python.keras import optimizers\n",
    "from tensorflow.python.keras.models import Sequential, Model\n",
    "from tensorflow.python.keras.layers import Dense, Activation, Convolution2D, MaxPooling2D, Flatten, Dropout, GlobalAveragePooling2D\n",
    "from tensorflow.python.keras import backend as k \n",
    "from tensorflow.python.keras.callbacks import ModelCheckpoint, LearningRateScheduler, EarlyStopping, Callback, ReduceLROnPlateau\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import glob\n",
    "import shutil\n",
    "import math\n",
    "import os\n",
    "from keras.models import load_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We're in the fold:  0\n",
      "Found 2383 images belonging to 15 classes.\n",
      "Found 602 images belonging to 15 classes.\n",
      "Epoch 1/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.9881 - acc: 0.6978Epoch 00000: val_loss improved from inf to 0.43608, saving model to where_am_I_V3_5kfold_0.h5\n",
      "74/74 [==============================] - 62s - loss: 0.9803 - acc: 0.6989 - val_loss: 0.4361 - val_acc: 0.8524\n",
      "Epoch 2/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.2441 - acc: 0.9271Epoch 00001: val_loss improved from 0.43608 to 0.36927, saving model to where_am_I_V3_5kfold_0.h5\n",
      "74/74 [==============================] - 29s - loss: 0.2453 - acc: 0.9260 - val_loss: 0.3693 - val_acc: 0.8912\n",
      "Epoch 3/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.1522 - acc: 0.9529Epoch 00002: val_loss improved from 0.36927 to 0.24788, saving model to where_am_I_V3_5kfold_0.h5\n",
      "74/74 [==============================] - 29s - loss: 0.1512 - acc: 0.9531 - val_loss: 0.2479 - val_acc: 0.9228\n",
      "Epoch 4/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.1136 - acc: 0.9634Epoch 00003: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.1125 - acc: 0.9640 - val_loss: 0.2870 - val_acc: 0.9158\n",
      "Epoch 5/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0774 - acc: 0.9786Epoch 00004: val_loss improved from 0.24788 to 0.19327, saving model to where_am_I_V3_5kfold_0.h5\n",
      "74/74 [==============================] - 29s - loss: 0.0770 - acc: 0.9789 - val_loss: 0.1933 - val_acc: 0.9351\n",
      "Epoch 6/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0644 - acc: 0.9798Epoch 00005: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0644 - acc: 0.9797 - val_loss: 0.2734 - val_acc: 0.9175\n",
      "Epoch 7/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0801 - acc: 0.9743Epoch 00006: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0802 - acc: 0.9742 - val_loss: 0.2002 - val_acc: 0.9281\n",
      "Epoch 8/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0582 - acc: 0.9819Epoch 00007: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0587 - acc: 0.9813 - val_loss: 0.2229 - val_acc: 0.9368\n",
      "Epoch 9/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0376 - acc: 0.9902Epoch 00008: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0379 - acc: 0.9899 - val_loss: 0.2199 - val_acc: 0.9386\n",
      "Epoch 10/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0284 - acc: 0.9910Epoch 00009: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0282 - acc: 0.9911 - val_loss: 0.2064 - val_acc: 0.9509\n",
      "Epoch 11/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0350 - acc: 0.9914Epoch 00010: val_loss improved from 0.19327 to 0.18277, saving model to where_am_I_V3_5kfold_0.h5\n",
      "74/74 [==============================] - 29s - loss: 0.0351 - acc: 0.9915 - val_loss: 0.1828 - val_acc: 0.9544\n",
      "Epoch 12/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0372 - acc: 0.9875Epoch 00011: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0374 - acc: 0.9873 - val_loss: 0.2084 - val_acc: 0.9333\n",
      "Epoch 13/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0430 - acc: 0.9872Epoch 00012: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0433 - acc: 0.9869 - val_loss: 0.1944 - val_acc: 0.9439\n",
      "Epoch 14/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0495 - acc: 0.9842Epoch 00013: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0495 - acc: 0.9844 - val_loss: 0.2756 - val_acc: 0.9298\n",
      "Epoch 15/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0400 - acc: 0.9867Epoch 00014: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0395 - acc: 0.9869 - val_loss: 0.2115 - val_acc: 0.9368\n",
      "Epoch 16/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0330 - acc: 0.9902Epoch 00015: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0326 - acc: 0.9903 - val_loss: 0.2320 - val_acc: 0.9333\n",
      "Epoch 17/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0325 - acc: 0.9906Epoch 00016: val_loss did not improve\n",
      "\n",
      "Epoch 00016: reducing learning rate to 1.9999999494757503e-05.\n",
      "74/74 [==============================] - 28s - loss: 0.0329 - acc: 0.9903 - val_loss: 0.2268 - val_acc: 0.9228\n",
      "Epoch 18/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0172 - acc: 0.9961Epoch 00017: val_loss improved from 0.18277 to 0.15564, saving model to where_am_I_V3_5kfold_0.h5\n",
      "74/74 [==============================] - 31s - loss: 0.0170 - acc: 0.9962 - val_loss: 0.1556 - val_acc: 0.9491\n",
      "Epoch 19/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0122 - acc: 0.9974Epoch 00018: val_loss improved from 0.15564 to 0.12159, saving model to where_am_I_V3_5kfold_0.h5\n",
      "74/74 [==============================] - 29s - loss: 0.0120 - acc: 0.9975 - val_loss: 0.1216 - val_acc: 0.9526\n",
      "Epoch 20/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0052 - acc: 0.9996Epoch 00019: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0052 - acc: 0.9996 - val_loss: 0.1447 - val_acc: 0.9514\n",
      "Epoch 21/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0083 - acc: 0.9974Epoch 00020: val_loss did not improve\n",
      "74/74 [==============================] - 28s - loss: 0.0083 - acc: 0.9975 - val_loss: 0.1372 - val_acc: 0.9456\n",
      "Epoch 22/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0089 - acc: 0.9974Epoch 00021: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0089 - acc: 0.9974 - val_loss: 0.1587 - val_acc: 0.9474\n",
      "Epoch 23/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0064 - acc: 0.9987Epoch 00022: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0063 - acc: 0.9987 - val_loss: 0.1313 - val_acc: 0.9491\n",
      "Epoch 24/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0099 - acc: 0.9983Epoch 00023: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0098 - acc: 0.9983 - val_loss: 0.1435 - val_acc: 0.9632\n",
      "Epoch 25/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0045 - acc: 0.9987Epoch 00024: val_loss did not improve\n",
      "\n",
      "Epoch 00024: reducing learning rate to 3.999999898951501e-06.\n",
      "74/74 [==============================] - 27s - loss: 0.0045 - acc: 0.9987 - val_loss: 0.1568 - val_acc: 0.9596\n",
      "Epoch 26/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0059 - acc: 0.9987Epoch 00025: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0060 - acc: 0.9987 - val_loss: 0.1594 - val_acc: 0.9579\n",
      "Epoch 27/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0050 - acc: 0.9987Epoch 00026: val_loss improved from 0.12159 to 0.12005, saving model to where_am_I_V3_5kfold_0.h5\n",
      "74/74 [==============================] - 30s - loss: 0.0050 - acc: 0.9987 - val_loss: 0.1200 - val_acc: 0.9649\n",
      "Epoch 28/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0033 - acc: 0.9996Epoch 00027: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0039 - acc: 0.9992 - val_loss: 0.1545 - val_acc: 0.9544\n",
      "Epoch 29/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0038 - acc: 0.9991Epoch 00028: val_loss improved from 0.12005 to 0.10357, saving model to where_am_I_V3_5kfold_0.h5\n",
      "74/74 [==============================] - 30s - loss: 0.0038 - acc: 0.9992 - val_loss: 0.1036 - val_acc: 0.9667\n",
      "Epoch 30/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0035 - acc: 0.9996Epoch 00029: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0035 - acc: 0.9996 - val_loss: 0.1438 - val_acc: 0.9614\n",
      "Epoch 31/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0047 - acc: 0.9983Epoch 00030: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0047 - acc: 0.9983 - val_loss: 0.1499 - val_acc: 0.9596\n",
      "Epoch 32/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0025 - acc: 1.0000Epoch 00031: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0025 - acc: 1.0000 - val_loss: 0.1422 - val_acc: 0.9632\n",
      "Epoch 33/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0030 - acc: 0.9996Epoch 00032: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0031 - acc: 0.9996 - val_loss: 0.1584 - val_acc: 0.9579\n",
      "Epoch 34/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0026 - acc: 1.0000Epoch 00033: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0026 - acc: 1.0000 - val_loss: 0.1286 - val_acc: 0.9667\n",
      "Epoch 35/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0034 - acc: 0.9996Epoch 00034: val_loss did not improve\n",
      "\n",
      "Epoch 00034: reducing learning rate to 7.999999979801942e-07.\n",
      "74/74 [==============================] - 26s - loss: 0.0034 - acc: 0.9996 - val_loss: 0.1433 - val_acc: 0.9561\n",
      "Epoch 36/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0026 - acc: 1.0000Epoch 00035: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0025 - acc: 1.0000 - val_loss: 0.1525 - val_acc: 0.9509\n",
      "Epoch 37/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0065 - acc: 0.9979Epoch 00036: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0065 - acc: 0.9979 - val_loss: 0.1464 - val_acc: 0.9596\n",
      "Epoch 38/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0026 - acc: 1.0000Epoch 00037: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0026 - acc: 1.0000 - val_loss: 0.1647 - val_acc: 0.9579\n",
      "Epoch 39/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0022 - acc: 0.9996Epoch 00038: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0022 - acc: 0.9996 - val_loss: 0.1419 - val_acc: 0.9566\n",
      "Epoch 40/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0030 - acc: 1.0000Epoch 00039: val_loss did not improve\n",
      "\n",
      "Epoch 00039: reducing learning rate to 1.600000018697756e-07.\n",
      "74/74 [==============================] - 27s - loss: 0.0030 - acc: 1.0000 - val_loss: 0.1764 - val_acc: 0.9561\n",
      "Epoch 41/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0050 - acc: 0.9991Epoch 00040: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0050 - acc: 0.9992 - val_loss: 0.1530 - val_acc: 0.9561\n",
      "Epoch 42/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0024 - acc: 1.0000Epoch 00041: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0023 - acc: 1.0000 - val_loss: 0.1224 - val_acc: 0.9614\n",
      "Epoch 43/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0030 - acc: 0.9996Epoch 00042: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0031 - acc: 0.9996 - val_loss: 0.1217 - val_acc: 0.9649\n",
      "Epoch 44/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0034 - acc: 1.0000Epoch 00043: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0033 - acc: 1.0000 - val_loss: 0.1452 - val_acc: 0.9509\n",
      "Epoch 45/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0040 - acc: 0.9996Epoch 00044: val_loss did not improve\n",
      "\n",
      "Epoch 00044: reducing learning rate to 3.199999980552093e-08.\n",
      "74/74 [==============================] - 27s - loss: 0.0040 - acc: 0.9996 - val_loss: 0.1393 - val_acc: 0.9596\n",
      "Epoch 46/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0039 - acc: 1.0000Epoch 00045: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0038 - acc: 1.0000 - val_loss: 0.1254 - val_acc: 0.9614\n",
      "Epoch 47/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0036 - acc: 0.9996Epoch 00046: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0035 - acc: 0.9996 - val_loss: 0.1381 - val_acc: 0.9649\n",
      "Epoch 48/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0042 - acc: 0.9991Epoch 00047: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0042 - acc: 0.9992 - val_loss: 0.1899 - val_acc: 0.9509\n",
      "Epoch 49/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0040 - acc: 0.9987Epoch 00048: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0040 - acc: 0.9987 - val_loss: 0.1454 - val_acc: 0.9526\n",
      "Epoch 50/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0042 - acc: 0.9987Epoch 00049: val_loss did not improve\n",
      "\n",
      "Epoch 00049: reducing learning rate to 1e-08.\n",
      "74/74 [==============================] - 27s - loss: 0.0042 - acc: 0.9987 - val_loss: 0.1485 - val_acc: 0.9596\n",
      "Epoch 51/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0032 - acc: 1.0000Epoch 00050: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0032 - acc: 1.0000 - val_loss: 0.1713 - val_acc: 0.9526\n",
      "Epoch 52/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0027 - acc: 0.9996Epoch 00051: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0028 - acc: 0.9996 - val_loss: 0.1341 - val_acc: 0.9632\n",
      "Epoch 53/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0029 - acc: 1.0000Epoch 00052: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0029 - acc: 1.0000 - val_loss: 0.1376 - val_acc: 0.9649\n",
      "Epoch 54/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0027 - acc: 0.9996Epoch 00053: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0027 - acc: 0.9996 - val_loss: 0.1492 - val_acc: 0.9544\n",
      "Epoch 55/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0045 - acc: 0.9991Epoch 00054: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0045 - acc: 0.9992 - val_loss: 0.1379 - val_acc: 0.9579\n",
      "Epoch 00054: early stopping\n",
      "\n",
      "-----------TEST-----------\n",
      "Found 1500 images belonging to 1 classes.\n",
      "1500/1500 [==============================] - 30s 20ms/step\n",
      "We're in the fold:  1\n",
      "Found 2383 images belonging to 15 classes.\n",
      "Found 602 images belonging to 15 classes.\n",
      "Epoch 1/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.9260 - acc: 0.7098Epoch 00000: val_loss improved from inf to 0.46307, saving model to where_am_I_V3_5kfold_1.h5\n",
      "74/74 [==============================] - 102s - loss: 0.9215 - acc: 0.7116 - val_loss: 0.4631 - val_acc: 0.8611\n",
      "Epoch 2/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.2417 - acc: 0.9259Epoch 00001: val_loss improved from 0.46307 to 0.20692, saving model to where_am_I_V3_5kfold_1.h5\n",
      "74/74 [==============================] - 29s - loss: 0.2410 - acc: 0.9261 - val_loss: 0.2069 - val_acc: 0.9316\n",
      "Epoch 3/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.1208 - acc: 0.9639Epoch 00002: val_loss did not improve\n",
      "74/74 [==============================] - 26s - loss: 0.1210 - acc: 0.9636 - val_loss: 0.2423 - val_acc: 0.9263\n",
      "Epoch 4/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0975 - acc: 0.9713Epoch 00003: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0995 - acc: 0.9704 - val_loss: 0.3665 - val_acc: 0.8930\n",
      "Epoch 5/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0868 - acc: 0.9735Epoch 00004: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0862 - acc: 0.9738 - val_loss: 0.3055 - val_acc: 0.9105\n",
      "Epoch 6/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0687 - acc: 0.9782Epoch 00005: val_loss improved from 0.20692 to 0.14536, saving model to where_am_I_V3_5kfold_1.h5\n",
      "74/74 [==============================] - 29s - loss: 0.0683 - acc: 0.9785 - val_loss: 0.1454 - val_acc: 0.9614\n",
      "Epoch 7/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0708 - acc: 0.9798Epoch 00006: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0717 - acc: 0.9796 - val_loss: 0.2907 - val_acc: 0.9228\n",
      "Epoch 8/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0798 - acc: 0.9746Epoch 00007: val_loss did not improve\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "74/74 [==============================] - 27s - loss: 0.0788 - acc: 0.9750 - val_loss: 0.2962 - val_acc: 0.9263\n",
      "Epoch 9/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0535 - acc: 0.9854Epoch 00008: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0532 - acc: 0.9852 - val_loss: 0.2049 - val_acc: 0.9439\n",
      "Epoch 10/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0512 - acc: 0.9807Epoch 00009: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0514 - acc: 0.9810 - val_loss: 0.1905 - val_acc: 0.9526\n",
      "Epoch 11/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0327 - acc: 0.9880Epoch 00010: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0328 - acc: 0.9878 - val_loss: 0.2169 - val_acc: 0.9474\n",
      "Epoch 12/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0267 - acc: 0.9910Epoch 00011: val_loss did not improve\n",
      "\n",
      "Epoch 00011: reducing learning rate to 1.9999999494757503e-05.\n",
      "74/74 [==============================] - 29s - loss: 0.0273 - acc: 0.9907 - val_loss: 0.1630 - val_acc: 0.9544\n",
      "Epoch 13/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0247 - acc: 0.9906Epoch 00012: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0247 - acc: 0.9907 - val_loss: 0.1936 - val_acc: 0.9421\n",
      "Epoch 14/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0197 - acc: 0.9957Epoch 00013: val_loss improved from 0.14536 to 0.13982, saving model to where_am_I_V3_5kfold_1.h5\n",
      "74/74 [==============================] - 29s - loss: 0.0194 - acc: 0.9958 - val_loss: 0.1398 - val_acc: 0.9509\n",
      "Epoch 15/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0128 - acc: 0.9966Epoch 00014: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0128 - acc: 0.9966 - val_loss: 0.1592 - val_acc: 0.9579\n",
      "Epoch 16/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0078 - acc: 0.9991Epoch 00015: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0078 - acc: 0.9992 - val_loss: 0.1671 - val_acc: 0.9491\n",
      "Epoch 17/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0079 - acc: 0.9979Epoch 00016: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0078 - acc: 0.9979 - val_loss: 0.1853 - val_acc: 0.9456\n",
      "Epoch 18/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0067 - acc: 0.9987Epoch 00017: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0067 - acc: 0.9987 - val_loss: 0.1656 - val_acc: 0.9509\n",
      "Epoch 19/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0081 - acc: 0.9979Epoch 00018: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0080 - acc: 0.9979 - val_loss: 0.2139 - val_acc: 0.9509\n",
      "Epoch 20/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0063 - acc: 0.9987Epoch 00019: val_loss did not improve\n",
      "\n",
      "Epoch 00019: reducing learning rate to 3.999999898951501e-06.\n",
      "74/74 [==============================] - 27s - loss: 0.0062 - acc: 0.9987 - val_loss: 0.1629 - val_acc: 0.9514\n",
      "Epoch 21/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0053 - acc: 0.9996Epoch 00020: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0053 - acc: 0.9996 - val_loss: 0.1482 - val_acc: 0.9474\n",
      "Epoch 22/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0067 - acc: 0.9979Epoch 00021: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0066 - acc: 0.9979 - val_loss: 0.1706 - val_acc: 0.9509\n",
      "Epoch 23/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0070 - acc: 0.9979Epoch 00022: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0070 - acc: 0.9979 - val_loss: 0.1615 - val_acc: 0.9526\n",
      "Epoch 24/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0068 - acc: 0.9983Epoch 00023: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0068 - acc: 0.9983 - val_loss: 0.1520 - val_acc: 0.9579\n",
      "Epoch 25/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0048 - acc: 0.9996Epoch 00024: val_loss did not improve\n",
      "\n",
      "Epoch 00024: reducing learning rate to 7.999999979801942e-07.\n",
      "74/74 [==============================] - 27s - loss: 0.0048 - acc: 0.9996 - val_loss: 0.1730 - val_acc: 0.9526\n",
      "Epoch 26/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0046 - acc: 0.9991Epoch 00025: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0047 - acc: 0.9992 - val_loss: 0.1593 - val_acc: 0.9509\n",
      "Epoch 27/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0050 - acc: 0.9991Epoch 00026: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0049 - acc: 0.9992 - val_loss: 0.1584 - val_acc: 0.9544\n",
      "Epoch 28/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0028 - acc: 1.0000Epoch 00027: val_loss improved from 0.13982 to 0.13480, saving model to where_am_I_V3_5kfold_1.h5\n",
      "74/74 [==============================] - 29s - loss: 0.0031 - acc: 1.0000 - val_loss: 0.1348 - val_acc: 0.9509\n",
      "Epoch 29/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0055 - acc: 0.9996Epoch 00028: val_loss improved from 0.13480 to 0.12330, saving model to where_am_I_V3_5kfold_1.h5\n",
      "74/74 [==============================] - 29s - loss: 0.0054 - acc: 0.9996 - val_loss: 0.1233 - val_acc: 0.9561\n",
      "Epoch 30/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0058 - acc: 0.9991Epoch 00029: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0057 - acc: 0.9992 - val_loss: 0.1715 - val_acc: 0.9526\n",
      "Epoch 31/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0072 - acc: 0.9987Epoch 00030: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0072 - acc: 0.9987 - val_loss: 0.2038 - val_acc: 0.9474\n",
      "Epoch 32/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0047 - acc: 0.9991Epoch 00031: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0047 - acc: 0.9992 - val_loss: 0.1531 - val_acc: 0.9526\n",
      "Epoch 00031: early stopping\n",
      "\n",
      "-----------TEST-----------\n",
      "Found 1500 images belonging to 1 classes.\n",
      "1500/1500 [==============================] - 33s 22ms/step\n",
      "We're in the fold:  2\n",
      "Found 2383 images belonging to 15 classes.\n",
      "Found 602 images belonging to 15 classes.\n",
      "Epoch 1/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.9835 - acc: 0.6922Epoch 00000: val_loss improved from inf to 0.50763, saving model to where_am_I_V3_5kfold_2.h5\n",
      "74/74 [==============================] - 131s - loss: 0.9738 - acc: 0.6947 - val_loss: 0.5076 - val_acc: 0.8542\n",
      "Epoch 2/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.2552 - acc: 0.9207Epoch 00001: val_loss improved from 0.50763 to 0.39102, saving model to where_am_I_V3_5kfold_2.h5\n",
      "74/74 [==============================] - 29s - loss: 0.2561 - acc: 0.9201 - val_loss: 0.3910 - val_acc: 0.9105\n",
      "Epoch 3/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.1622 - acc: 0.9567Epoch 00002: val_loss improved from 0.39102 to 0.32001, saving model to where_am_I_V3_5kfold_2.h5\n",
      "74/74 [==============================] - 29s - loss: 0.1611 - acc: 0.9569 - val_loss: 0.3200 - val_acc: 0.9175\n",
      "Epoch 4/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.1090 - acc: 0.9636Epoch 00003: val_loss improved from 0.32001 to 0.28694, saving model to where_am_I_V3_5kfold_2.h5\n",
      "74/74 [==============================] - 29s - loss: 0.1083 - acc: 0.9636 - val_loss: 0.2869 - val_acc: 0.9246\n",
      "Epoch 5/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0645 - acc: 0.9807Epoch 00004: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0649 - acc: 0.9805 - val_loss: 0.3187 - val_acc: 0.9211\n",
      "Epoch 6/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0739 - acc: 0.9760Epoch 00005: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0739 - acc: 0.9759 - val_loss: 0.2909 - val_acc: 0.9246\n",
      "Epoch 7/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0597 - acc: 0.9799Epoch 00006: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0603 - acc: 0.9793 - val_loss: 0.3622 - val_acc: 0.9053\n",
      "Epoch 8/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0464 - acc: 0.9867Epoch 00007: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0459 - acc: 0.9869 - val_loss: 0.2957 - val_acc: 0.9368\n",
      "Epoch 9/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0358 - acc: 0.9902Epoch 00008: val_loss improved from 0.28694 to 0.19131, saving model to where_am_I_V3_5kfold_2.h5\n",
      "74/74 [==============================] - 29s - loss: 0.0354 - acc: 0.9903 - val_loss: 0.1913 - val_acc: 0.9509\n",
      "Epoch 10/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0334 - acc: 0.9906Epoch 00009: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0332 - acc: 0.9907 - val_loss: 0.2812 - val_acc: 0.9351\n",
      "Epoch 11/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0398 - acc: 0.9876Epoch 00010: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0401 - acc: 0.9873 - val_loss: 0.2927 - val_acc: 0.9333\n",
      "Epoch 12/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0494 - acc: 0.9829Epoch 00011: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0511 - acc: 0.9823 - val_loss: 0.2897 - val_acc: 0.9263\n",
      "Epoch 13/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0316 - acc: 0.9910Epoch 00012: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0329 - acc: 0.9907 - val_loss: 0.2282 - val_acc: 0.9298\n",
      "Epoch 14/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0300 - acc: 0.9902Epoch 00013: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0303 - acc: 0.9899 - val_loss: 0.4041 - val_acc: 0.9070\n",
      "Epoch 15/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0418 - acc: 0.9892Epoch 00014: val_loss did not improve\n",
      "\n",
      "Epoch 00014: reducing learning rate to 1.9999999494757503e-05.\n",
      "74/74 [==============================] - 30s - loss: 0.0417 - acc: 0.9894 - val_loss: 0.2500 - val_acc: 0.9439\n",
      "Epoch 16/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0266 - acc: 0.9919Epoch 00015: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0264 - acc: 0.9920 - val_loss: 0.3295 - val_acc: 0.9298\n",
      "Epoch 17/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0117 - acc: 0.9970Epoch 00016: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0116 - acc: 0.9970 - val_loss: 0.2623 - val_acc: 0.9386\n",
      "Epoch 18/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0088 - acc: 0.9983Epoch 00017: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0088 - acc: 0.9983 - val_loss: 0.2571 - val_acc: 0.9404\n",
      "Epoch 19/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0060 - acc: 0.9983Epoch 00018: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0060 - acc: 0.9983 - val_loss: 0.2268 - val_acc: 0.9439\n",
      "Epoch 20/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0080 - acc: 0.9974Epoch 00019: val_loss did not improve\n",
      "\n",
      "Epoch 00019: reducing learning rate to 3.999999898951501e-06.\n",
      "74/74 [==============================] - 27s - loss: 0.0082 - acc: 0.9975 - val_loss: 0.2291 - val_acc: 0.9427\n",
      "Epoch 21/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0057 - acc: 0.9991Epoch 00020: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0056 - acc: 0.9992 - val_loss: 0.3127 - val_acc: 0.9333\n",
      "Epoch 22/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0048 - acc: 0.9996Epoch 00021: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0047 - acc: 0.9996 - val_loss: 0.2626 - val_acc: 0.9386\n",
      "Epoch 23/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0157 - acc: 0.9965Epoch 00022: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0155 - acc: 0.9965 - val_loss: 0.2306 - val_acc: 0.9421\n",
      "Epoch 24/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0052 - acc: 0.9991Epoch 00023: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0052 - acc: 0.9992 - val_loss: 0.2631 - val_acc: 0.9404\n",
      "Epoch 25/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0064 - acc: 0.9983Epoch 00024: val_loss did not improve\n",
      "\n",
      "Epoch 00024: reducing learning rate to 7.999999979801942e-07.\n",
      "74/74 [==============================] - 27s - loss: 0.0063 - acc: 0.9983 - val_loss: 0.2308 - val_acc: 0.9491\n",
      "Epoch 26/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0061 - acc: 0.9996Epoch 00025: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0061 - acc: 0.9996 - val_loss: 0.2239 - val_acc: 0.9474\n",
      "Epoch 27/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0043 - acc: 1.0000Epoch 00026: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0043 - acc: 1.0000 - val_loss: 0.2873 - val_acc: 0.9421\n",
      "Epoch 28/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0073 - acc: 0.9983Epoch 00027: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0072 - acc: 0.9983 - val_loss: 0.2004 - val_acc: 0.9509\n",
      "Epoch 29/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0082 - acc: 0.9969Epoch 00028: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0088 - acc: 0.9966 - val_loss: 0.2795 - val_acc: 0.9404\n",
      "Epoch 30/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0053 - acc: 0.9987Epoch 00031: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0053 - acc: 0.9987 - val_loss: 0.2072 - val_acc: 0.9561\n",
      "Epoch 33/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0085 - acc: 0.9983Epoch 00032: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0084 - acc: 0.9983 - val_loss: 0.2243 - val_acc: 0.9509\n",
      "Epoch 34/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0053 - acc: 0.9991Epoch 00033: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0052 - acc: 0.9992 - val_loss: 0.2761 - val_acc: 0.9368\n",
      "Epoch 35/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0043 - acc: 0.9996Epoch 00034: val_loss did not improve\n",
      "\n",
      "Epoch 00034: reducing learning rate to 3.199999980552093e-08.\n",
      "74/74 [==============================] - 27s - loss: 0.0043 - acc: 0.9996 - val_loss: 0.2423 - val_acc: 0.9456\n",
      "Epoch 36/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0088 - acc: 0.9965Epoch 00035: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0087 - acc: 0.9966 - val_loss: 0.2164 - val_acc: 0.9509\n",
      "Epoch 37/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0051 - acc: 0.9991Epoch 00036: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0050 - acc: 0.9992 - val_loss: 0.2384 - val_acc: 0.9456\n",
      "Epoch 38/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0033 - acc: 1.0000Epoch 00037: val_loss improved from 0.19131 to 0.18878, saving model to where_am_I_V3_5kfold_2.h5\n",
      "74/74 [==============================] - 29s - loss: 0.0036 - acc: 1.0000 - val_loss: 0.1888 - val_acc: 0.9579\n",
      "Epoch 39/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0063 - acc: 0.9983Epoch 00038: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0065 - acc: 0.9983 - val_loss: 0.2530 - val_acc: 0.9427\n",
      "Epoch 40/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0042 - acc: 0.9996Epoch 00039: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0042 - acc: 0.9996 - val_loss: 0.2136 - val_acc: 0.9526\n",
      "Epoch 41/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0076 - acc: 0.9991Epoch 00040: val_loss did not improve\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "74/74 [==============================] - 27s - loss: 0.0075 - acc: 0.9992 - val_loss: 0.2583 - val_acc: 0.9421\n",
      "Epoch 42/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0055 - acc: 0.9983Epoch 00041: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0054 - acc: 0.9983 - val_loss: 0.2285 - val_acc: 0.9491\n",
      "Epoch 43/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0064 - acc: 0.9987Epoch 00042: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0063 - acc: 0.9987 - val_loss: 0.2339 - val_acc: 0.9474\n",
      "Epoch 44/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0029 - acc: 1.0000Epoch 00043: val_loss did not improve\n",
      "\n",
      "Epoch 00043: reducing learning rate to 1e-08.\n",
      "74/74 [==============================] - 27s - loss: 0.0029 - acc: 1.0000 - val_loss: 0.2316 - val_acc: 0.9474\n",
      "Epoch 45/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0025 - acc: 1.0000Epoch 00044: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0025 - acc: 1.0000 - val_loss: 0.2368 - val_acc: 0.9456\n",
      "Epoch 46/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0073 - acc: 0.9974Epoch 00045: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0074 - acc: 0.9974 - val_loss: 0.2515 - val_acc: 0.9474\n",
      "Epoch 47/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0040 - acc: 0.9996Epoch 00046: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0040 - acc: 0.9996 - val_loss: 0.2305 - val_acc: 0.9439\n",
      "Epoch 48/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0055 - acc: 0.9987Epoch 00047: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0055 - acc: 0.9987 - val_loss: 0.2541 - val_acc: 0.9421\n",
      "Epoch 49/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0037 - acc: 0.9996Epoch 00048: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0037 - acc: 0.9996 - val_loss: 0.2364 - val_acc: 0.9491\n",
      "Epoch 50/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0026 - acc: 1.0000Epoch 00049: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0026 - acc: 1.0000 - val_loss: 0.2196 - val_acc: 0.9474\n",
      "Epoch 51/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0083 - acc: 0.9983Epoch 00050: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0082 - acc: 0.9983 - val_loss: 0.2198 - val_acc: 0.9456\n",
      "Epoch 52/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0048 - acc: 0.9991Epoch 00051: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0048 - acc: 0.9992 - val_loss: 0.2557 - val_acc: 0.9439\n",
      "Epoch 53/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0034 - acc: 1.0000Epoch 00052: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0034 - acc: 1.0000 - val_loss: 0.2361 - val_acc: 0.9491\n",
      "Epoch 54/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0047 - acc: 0.9991Epoch 00053: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0047 - acc: 0.9992 - val_loss: 0.2574 - val_acc: 0.9421\n",
      "Epoch 55/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0039 - acc: 0.9996Epoch 00054: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0039 - acc: 0.9996 - val_loss: 0.2371 - val_acc: 0.9439\n",
      "Epoch 56/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0082 - acc: 0.9987Epoch 00055: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0082 - acc: 0.9987 - val_loss: 0.2588 - val_acc: 0.9421\n",
      "Epoch 57/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0050 - acc: 0.9987Epoch 00056: val_loss improved from 0.18878 to 0.18751, saving model to where_am_I_V3_5kfold_2.h5\n",
      "74/74 [==============================] - 30s - loss: 0.0050 - acc: 0.9987 - val_loss: 0.1875 - val_acc: 0.9509\n",
      "Epoch 58/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0040 - acc: 0.9996Epoch 00057: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0039 - acc: 0.9996 - val_loss: 0.2576 - val_acc: 0.9410\n",
      "Epoch 59/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0052 - acc: 0.9996Epoch 00058: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0052 - acc: 0.9996 - val_loss: 0.2853 - val_acc: 0.9421\n",
      "Epoch 60/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0081 - acc: 0.9970Epoch 00059: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0081 - acc: 0.9970 - val_loss: 0.2400 - val_acc: 0.9456\n",
      "Epoch 61/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0048 - acc: 0.9991Epoch 00060: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0048 - acc: 0.9992 - val_loss: 0.2168 - val_acc: 0.9509\n",
      "Epoch 62/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0065 - acc: 0.9979Epoch 00061: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0065 - acc: 0.9979 - val_loss: 0.2350 - val_acc: 0.9421\n",
      "Epoch 63/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0051 - acc: 0.9974Epoch 00062: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0051 - acc: 0.9975 - val_loss: 0.2395 - val_acc: 0.9439\n",
      "Epoch 64/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0040 - acc: 0.9996Epoch 00063: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0041 - acc: 0.9996 - val_loss: 0.2702 - val_acc: 0.9386\n",
      "Epoch 00063: early stopping\n",
      "\n",
      "-----------TEST-----------\n",
      "Found 1500 images belonging to 1 classes.\n",
      "1500/1500 [==============================] - 35s 23ms/step\n",
      "We're in the fold:  3\n",
      "Found 2383 images belonging to 15 classes.\n",
      "Found 602 images belonging to 15 classes.\n",
      "Epoch 1/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.9815 - acc: 0.6952Epoch 00000: val_loss improved from inf to 0.44881, saving model to where_am_I_V3_5kfold_3.h5\n",
      "74/74 [==============================] - 177s - loss: 0.9752 - acc: 0.6968 - val_loss: 0.4488 - val_acc: 0.8594\n",
      "Epoch 2/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.2285 - acc: 0.9297Epoch 00001: val_loss improved from 0.44881 to 0.36084, saving model to where_am_I_V3_5kfold_3.h5\n",
      "74/74 [==============================] - 31s - loss: 0.2297 - acc: 0.9294 - val_loss: 0.3608 - val_acc: 0.8754\n",
      "Epoch 3/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.1510 - acc: 0.9549Epoch 00002: val_loss improved from 0.36084 to 0.31582, saving model to where_am_I_V3_5kfold_3.h5\n",
      "74/74 [==============================] - 32s - loss: 0.1497 - acc: 0.9551 - val_loss: 0.3158 - val_acc: 0.8912\n",
      "Epoch 4/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.1034 - acc: 0.9708Epoch 00003: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.1027 - acc: 0.9712 - val_loss: 0.3445 - val_acc: 0.8860\n",
      "Epoch 5/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0927 - acc: 0.9713Epoch 00004: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0938 - acc: 0.9709 - val_loss: 0.3461 - val_acc: 0.9105\n",
      "Epoch 6/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0842 - acc: 0.9699Epoch 00005: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0833 - acc: 0.9703 - val_loss: 0.3235 - val_acc: 0.8930\n",
      "Epoch 7/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0583 - acc: 0.9790Epoch 00006: val_loss improved from 0.31582 to 0.31208, saving model to where_am_I_V3_5kfold_3.h5\n",
      "74/74 [==============================] - 30s - loss: 0.0576 - acc: 0.9793 - val_loss: 0.3121 - val_acc: 0.9105\n",
      "Epoch 8/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0523 - acc: 0.9832Epoch 00007: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0534 - acc: 0.9826 - val_loss: 0.3519 - val_acc: 0.9035\n",
      "Epoch 9/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0371 - acc: 0.9875Epoch 00008: val_loss improved from 0.31208 to 0.18331, saving model to where_am_I_V3_5kfold_3.h5\n",
      "74/74 [==============================] - 32s - loss: 0.0370 - acc: 0.9877 - val_loss: 0.1833 - val_acc: 0.9526\n",
      "Epoch 10/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0465 - acc: 0.9845Epoch 00009: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0460 - acc: 0.9847 - val_loss: 0.2910 - val_acc: 0.9070\n",
      "Epoch 11/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0376 - acc: 0.9880Epoch 00010: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0373 - acc: 0.9882 - val_loss: 0.2836 - val_acc: 0.9281\n",
      "Epoch 12/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0363 - acc: 0.9876Epoch 00011: val_loss did not improve\n",
      "74/74 [==============================] - 28s - loss: 0.0360 - acc: 0.9878 - val_loss: 0.2416 - val_acc: 0.9281\n",
      "Epoch 13/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0486 - acc: 0.9867Epoch 00012: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0480 - acc: 0.9869 - val_loss: 0.2220 - val_acc: 0.9333\n",
      "Epoch 14/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0206 - acc: 0.9940Epoch 00013: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0211 - acc: 0.9937 - val_loss: 0.3061 - val_acc: 0.9298\n",
      "Epoch 15/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0518 - acc: 0.9862Epoch 00014: val_loss did not improve\n",
      "\n",
      "Epoch 00014: reducing learning rate to 1.9999999494757503e-05.\n",
      "74/74 [==============================] - 31s - loss: 0.0513 - acc: 0.9864 - val_loss: 0.2232 - val_acc: 0.9579\n",
      "Epoch 16/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0318 - acc: 0.9901Epoch 00015: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0338 - acc: 0.9898 - val_loss: 0.2507 - val_acc: 0.9263\n",
      "Epoch 17/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0171 - acc: 0.9935Epoch 00016: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0169 - acc: 0.9936 - val_loss: 0.1871 - val_acc: 0.9544\n",
      "Epoch 18/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0124 - acc: 0.9970Epoch 00017: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0135 - acc: 0.9966 - val_loss: 0.2192 - val_acc: 0.9351\n",
      "Epoch 19/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0095 - acc: 0.9973Epoch 00018: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0093 - acc: 0.9974 - val_loss: 0.2518 - val_acc: 0.9316\n",
      "Epoch 20/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0097 - acc: 0.9966Epoch 00019: val_loss did not improve\n",
      "\n",
      "Epoch 00019: reducing learning rate to 3.999999898951501e-06.\n",
      "74/74 [==============================] - 27s - loss: 0.0096 - acc: 0.9966 - val_loss: 0.2279 - val_acc: 0.9375\n",
      "Epoch 21/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0059 - acc: 0.9987Epoch 00020: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0059 - acc: 0.9987 - val_loss: 0.2414 - val_acc: 0.9386\n",
      "Epoch 22/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0083 - acc: 0.9991Epoch 00021: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0089 - acc: 0.9987 - val_loss: 0.2171 - val_acc: 0.9404\n",
      "Epoch 23/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0063 - acc: 0.9987Epoch 00022: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0062 - acc: 0.9987 - val_loss: 0.2560 - val_acc: 0.9333\n",
      "Epoch 24/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0058 - acc: 0.9996Epoch 00023: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0065 - acc: 0.9992 - val_loss: 0.2401 - val_acc: 0.9316\n",
      "Epoch 25/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0120 - acc: 0.9965Epoch 00024: val_loss did not improve\n",
      "\n",
      "Epoch 00024: reducing learning rate to 7.999999979801942e-07.\n",
      "74/74 [==============================] - 27s - loss: 0.0118 - acc: 0.9966 - val_loss: 0.2218 - val_acc: 0.9474\n",
      "Epoch 26/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0071 - acc: 0.9987Epoch 00025: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0070 - acc: 0.9987 - val_loss: 0.1936 - val_acc: 0.9474\n",
      "Epoch 27/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0071 - acc: 0.9987Epoch 00026: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0071 - acc: 0.9987 - val_loss: 0.2233 - val_acc: 0.9281\n",
      "Epoch 28/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0073 - acc: 0.9987Epoch 00027: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0072 - acc: 0.9987 - val_loss: 0.2023 - val_acc: 0.9368\n",
      "Epoch 29/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0087 - acc: 0.9987Epoch 00028: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0086 - acc: 0.9987 - val_loss: 0.2223 - val_acc: 0.9281\n",
      "Epoch 30/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0073 - acc: 0.9983Epoch 00029: val_loss did not improve\n",
      "\n",
      "Epoch 00029: reducing learning rate to 1.600000018697756e-07.\n",
      "74/74 [==============================] - 27s - loss: 0.0073 - acc: 0.9983 - val_loss: 0.2253 - val_acc: 0.9404\n",
      "Epoch 31/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0046 - acc: 1.0000Epoch 00030: val_loss improved from 0.18331 to 0.17437, saving model to where_am_I_V3_5kfold_3.h5\n",
      "74/74 [==============================] - 29s - loss: 0.0045 - acc: 1.0000 - val_loss: 0.1744 - val_acc: 0.9404\n",
      "Epoch 32/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0042 - acc: 0.9996Epoch 00031: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0042 - acc: 0.9996 - val_loss: 0.2361 - val_acc: 0.9351\n",
      "Epoch 33/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0121 - acc: 0.9961Epoch 00032: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0120 - acc: 0.9962 - val_loss: 0.2195 - val_acc: 0.9404\n",
      "Epoch 34/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0063 - acc: 0.9987Epoch 00033: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0062 - acc: 0.9987 - val_loss: 0.2051 - val_acc: 0.9368\n",
      "Epoch 35/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0068 - acc: 0.9991Epoch 00034: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0071 - acc: 0.9992 - val_loss: 0.2320 - val_acc: 0.9333\n",
      "Epoch 36/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0055 - acc: 0.9987Epoch 00035: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0054 - acc: 0.9987 - val_loss: 0.2372 - val_acc: 0.9316\n",
      "Epoch 37/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0050 - acc: 0.9991Epoch 00036: val_loss did not improve\n",
      "\n",
      "Epoch 00036: reducing learning rate to 3.199999980552093e-08.\n",
      "74/74 [==============================] - 27s - loss: 0.0050 - acc: 0.9992 - val_loss: 0.2207 - val_acc: 0.9368\n",
      "Epoch 38/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0048 - acc: 0.9996Epoch 00037: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0047 - acc: 0.9996 - val_loss: 0.2502 - val_acc: 0.9351\n",
      "Epoch 39/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0069 - acc: 0.9979Epoch 00038: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0068 - acc: 0.9979 - val_loss: 0.2086 - val_acc: 0.9392\n",
      "Epoch 40/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0056 - acc: 0.9983Epoch 00039: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0055 - acc: 0.9983 - val_loss: 0.2296 - val_acc: 0.9368\n",
      "Epoch 41/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0084 - acc: 0.9991Epoch 00040: val_loss did not improve\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "74/74 [==============================] - 27s - loss: 0.0083 - acc: 0.9991 - val_loss: 0.2402 - val_acc: 0.9316\n",
      "Epoch 00040: early stopping\n",
      "\n",
      "-----------TEST-----------\n",
      "Found 1500 images belonging to 1 classes.\n",
      "1500/1500 [==============================] - 39s 26ms/step\n",
      "We're in the fold:  4\n",
      "Found 2408 images belonging to 15 classes.\n",
      "Found 577 images belonging to 15 classes.\n",
      "Epoch 1/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.9557 - acc: 0.7158Epoch 00000: val_loss improved from inf to 0.47319, saving model to where_am_I_V3_5kfold_4.h5\n",
      "74/74 [==============================] - 210s - loss: 0.9456 - acc: 0.7188 - val_loss: 0.4732 - val_acc: 0.8281\n",
      "Epoch 2/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.2560 - acc: 0.9170Epoch 00001: val_loss improved from 0.47319 to 0.35700, saving model to where_am_I_V3_5kfold_4.h5\n",
      "74/74 [==============================] - 31s - loss: 0.2536 - acc: 0.9177 - val_loss: 0.3570 - val_acc: 0.8881\n",
      "Epoch 3/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.1487 - acc: 0.9551Epoch 00002: val_loss improved from 0.35700 to 0.32085, saving model to where_am_I_V3_5kfold_4.h5\n",
      "74/74 [==============================] - 31s - loss: 0.1480 - acc: 0.9552 - val_loss: 0.3209 - val_acc: 0.8991\n",
      "Epoch 4/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.1161 - acc: 0.9662Epoch 00003: val_loss improved from 0.32085 to 0.31259, saving model to where_am_I_V3_5kfold_4.h5\n",
      "74/74 [==============================] - 30s - loss: 0.1148 - acc: 0.9666 - val_loss: 0.3126 - val_acc: 0.9046\n",
      "Epoch 5/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0796 - acc: 0.9769Epoch 00004: val_loss improved from 0.31259 to 0.28641, saving model to where_am_I_V3_5kfold_4.h5\n",
      "74/74 [==============================] - 30s - loss: 0.0796 - acc: 0.9768 - val_loss: 0.2864 - val_acc: 0.9083\n",
      "Epoch 6/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0506 - acc: 0.9854Epoch 00005: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0501 - acc: 0.9856 - val_loss: 0.3350 - val_acc: 0.8991\n",
      "Epoch 7/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0756 - acc: 0.9747Epoch 00006: val_loss improved from 0.28641 to 0.28215, saving model to where_am_I_V3_5kfold_4.h5\n",
      "74/74 [==============================] - 30s - loss: 0.0750 - acc: 0.9747 - val_loss: 0.2821 - val_acc: 0.9119\n",
      "Epoch 8/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0525 - acc: 0.9846Epoch 00007: val_loss improved from 0.28215 to 0.22146, saving model to where_am_I_V3_5kfold_4.h5\n",
      "74/74 [==============================] - 30s - loss: 0.0519 - acc: 0.9848 - val_loss: 0.2215 - val_acc: 0.9193\n",
      "Epoch 9/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0663 - acc: 0.9820Epoch 00008: val_loss did not improve\n",
      "74/74 [==============================] - 28s - loss: 0.0661 - acc: 0.9823 - val_loss: 0.2795 - val_acc: 0.9119\n",
      "Epoch 10/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0575 - acc: 0.9854Epoch 00009: val_loss did not improve\n",
      "74/74 [==============================] - 28s - loss: 0.0567 - acc: 0.9857 - val_loss: 0.2222 - val_acc: 0.9321\n",
      "Epoch 11/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0305 - acc: 0.9927Epoch 00010: val_loss improved from 0.22146 to 0.17093, saving model to where_am_I_V3_5kfold_4.h5\n",
      "74/74 [==============================] - 30s - loss: 0.0302 - acc: 0.9928 - val_loss: 0.1709 - val_acc: 0.9633\n",
      "Epoch 12/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0352 - acc: 0.9902Epoch 00011: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0357 - acc: 0.9899 - val_loss: 0.2971 - val_acc: 0.9211\n",
      "Epoch 13/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0431 - acc: 0.9876Epoch 00012: val_loss did not improve\n",
      "74/74 [==============================] - 28s - loss: 0.0427 - acc: 0.9878 - val_loss: 0.2286 - val_acc: 0.9284\n",
      "Epoch 14/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0503 - acc: 0.9854Epoch 00013: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0509 - acc: 0.9852 - val_loss: 0.2236 - val_acc: 0.9248\n",
      "Epoch 15/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0531 - acc: 0.9846Epoch 00014: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0525 - acc: 0.9848 - val_loss: 0.2155 - val_acc: 0.9413\n",
      "Epoch 16/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0269 - acc: 0.9919Epoch 00015: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0266 - acc: 0.9920 - val_loss: 0.1912 - val_acc: 0.9376\n",
      "Epoch 17/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0336 - acc: 0.9880Epoch 00016: val_loss did not improve\n",
      "\n",
      "Epoch 00016: reducing learning rate to 1.9999999494757503e-05.\n",
      "74/74 [==============================] - 32s - loss: 0.0334 - acc: 0.9882 - val_loss: 0.2482 - val_acc: 0.9339\n",
      "Epoch 18/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0278 - acc: 0.9914Epoch 00017: val_loss improved from 0.17093 to 0.15317, saving model to where_am_I_V3_5kfold_4.h5\n",
      "74/74 [==============================] - 30s - loss: 0.0277 - acc: 0.9916 - val_loss: 0.1532 - val_acc: 0.9633\n",
      "Epoch 19/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0126 - acc: 0.9979Epoch 00018: val_loss improved from 0.15317 to 0.13709, saving model to where_am_I_V3_5kfold_4.h5\n",
      "74/74 [==============================] - 30s - loss: 0.0130 - acc: 0.9975 - val_loss: 0.1371 - val_acc: 0.9633\n",
      "Epoch 20/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0143 - acc: 0.9957Epoch 00019: val_loss did not improve\n",
      "74/74 [==============================] - 28s - loss: 0.0148 - acc: 0.9954 - val_loss: 0.1454 - val_acc: 0.9601\n",
      "Epoch 21/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0075 - acc: 0.9979Epoch 00020: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0075 - acc: 0.9979 - val_loss: 0.1820 - val_acc: 0.9505\n",
      "Epoch 22/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0066 - acc: 0.9983Epoch 00021: val_loss did not improve\n",
      "74/74 [==============================] - 28s - loss: 0.0065 - acc: 0.9983 - val_loss: 0.1440 - val_acc: 0.9651\n",
      "Epoch 23/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0077 - acc: 0.9991Epoch 00022: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0077 - acc: 0.9992 - val_loss: 0.1584 - val_acc: 0.9633\n",
      "Epoch 24/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0060 - acc: 0.9987Epoch 00023: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0059 - acc: 0.9987 - val_loss: 0.1557 - val_acc: 0.9633\n",
      "Epoch 25/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0070 - acc: 0.9983Epoch 00024: val_loss improved from 0.13709 to 0.12198, saving model to where_am_I_V3_5kfold_4.h5\n",
      "74/74 [==============================] - 30s - loss: 0.0071 - acc: 0.9983 - val_loss: 0.1220 - val_acc: 0.9596\n",
      "Epoch 26/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0066 - acc: 0.9991Epoch 00025: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0065 - acc: 0.9992 - val_loss: 0.1849 - val_acc: 0.9486\n",
      "Epoch 27/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0046 - acc: 0.9996Epoch 00026: val_loss improved from 0.12198 to 0.11579, saving model to where_am_I_V3_5kfold_4.h5\n",
      "74/74 [==============================] - 31s - loss: 0.0045 - acc: 0.9996 - val_loss: 0.1158 - val_acc: 0.9651\n",
      "Epoch 28/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0098 - acc: 0.9953Epoch 00027: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0096 - acc: 0.9954 - val_loss: 0.1914 - val_acc: 0.9523\n",
      "Epoch 29/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0076 - acc: 0.9970Epoch 00028: val_loss improved from 0.11579 to 0.10429, saving model to where_am_I_V3_5kfold_4.h5\n",
      "74/74 [==============================] - 31s - loss: 0.0076 - acc: 0.9970 - val_loss: 0.1043 - val_acc: 0.9670\n",
      "Epoch 30/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0035 - acc: 0.9996Epoch 00029: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0036 - acc: 0.9996 - val_loss: 0.1670 - val_acc: 0.9541\n",
      "Epoch 31/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0052 - acc: 0.9983Epoch 00030: val_loss improved from 0.10429 to 0.10100, saving model to where_am_I_V3_5kfold_4.h5\n",
      "74/74 [==============================] - 31s - loss: 0.0051 - acc: 0.9983 - val_loss: 0.1010 - val_acc: 0.9651\n",
      "Epoch 32/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0041 - acc: 0.9983Epoch 00031: val_loss did not improve\n",
      "74/74 [==============================] - 28s - loss: 0.0040 - acc: 0.9983 - val_loss: 0.1285 - val_acc: 0.9615\n",
      "Epoch 33/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0044 - acc: 0.9987Epoch 00032: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0043 - acc: 0.9987 - val_loss: 0.1428 - val_acc: 0.9541\n",
      "Epoch 34/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0116 - acc: 0.9957Epoch 00033: val_loss did not improve\n",
      "74/74 [==============================] - 28s - loss: 0.0114 - acc: 0.9958 - val_loss: 0.1602 - val_acc: 0.9523\n",
      "Epoch 35/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0081 - acc: 0.9983Epoch 00034: val_loss did not improve\n",
      "74/74 [==============================] - 28s - loss: 0.0080 - acc: 0.9983 - val_loss: 0.1411 - val_acc: 0.9505\n",
      "Epoch 36/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0040 - acc: 0.9996Epoch 00035: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0040 - acc: 0.9996 - val_loss: 0.1481 - val_acc: 0.9596\n",
      "Epoch 37/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0024 - acc: 1.0000Epoch 00036: val_loss did not improve\n",
      "\n",
      "Epoch 00036: reducing learning rate to 3.999999898951501e-06.\n",
      "74/74 [==============================] - 27s - loss: 0.0025 - acc: 1.0000 - val_loss: 0.1404 - val_acc: 0.9615\n",
      "Epoch 38/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0058 - acc: 0.9983Epoch 00037: val_loss did not improve\n",
      "74/74 [==============================] - 28s - loss: 0.0089 - acc: 0.9966 - val_loss: 0.1524 - val_acc: 0.9560\n",
      "Epoch 39/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0033 - acc: 0.9987Epoch 00038: val_loss did not improve\n",
      "74/74 [==============================] - 28s - loss: 0.0033 - acc: 0.9987 - val_loss: 0.1280 - val_acc: 0.9601\n",
      "Epoch 40/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0049 - acc: 0.9974Epoch 00039: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0048 - acc: 0.9975 - val_loss: 0.1162 - val_acc: 0.9615\n",
      "Epoch 41/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0029 - acc: 0.9996Epoch 00040: val_loss did not improve\n",
      "74/74 [==============================] - 28s - loss: 0.0029 - acc: 0.9996 - val_loss: 0.1363 - val_acc: 0.9596\n",
      "Epoch 42/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0026 - acc: 0.9996Epoch 00041: val_loss did not improve\n",
      "\n",
      "Epoch 00041: reducing learning rate to 7.999999979801942e-07.\n",
      "74/74 [==============================] - 27s - loss: 0.0025 - acc: 0.9996 - val_loss: 0.1102 - val_acc: 0.9596\n",
      "Epoch 43/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0032 - acc: 0.9996Epoch 00042: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0034 - acc: 0.9996 - val_loss: 0.1214 - val_acc: 0.9578\n",
      "Epoch 44/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0032 - acc: 0.9996Epoch 00043: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0032 - acc: 0.9996 - val_loss: 0.1206 - val_acc: 0.9615\n",
      "Epoch 45/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0051 - acc: 0.9970Epoch 00044: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0050 - acc: 0.9971 - val_loss: 0.1062 - val_acc: 0.9651\n",
      "Epoch 46/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0043 - acc: 0.9987Epoch 00045: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0042 - acc: 0.9987 - val_loss: 0.1416 - val_acc: 0.9578\n",
      "Epoch 47/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0019 - acc: 1.0000Epoch 00046: val_loss did not improve\n",
      "\n",
      "Epoch 00046: reducing learning rate to 1.600000018697756e-07.\n",
      "74/74 [==============================] - 27s - loss: 0.0019 - acc: 1.0000 - val_loss: 0.1180 - val_acc: 0.9633\n",
      "Epoch 48/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0017 - acc: 1.0000Epoch 00047: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0017 - acc: 1.0000 - val_loss: 0.1681 - val_acc: 0.9468\n",
      "Epoch 49/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0113 - acc: 0.9961Epoch 00048: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0111 - acc: 0.9962 - val_loss: 0.1203 - val_acc: 0.9615\n",
      "Epoch 50/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0019 - acc: 0.9996Epoch 00049: val_loss did not improve\n",
      "74/74 [==============================] - 28s - loss: 0.0019 - acc: 0.9996 - val_loss: 0.1324 - val_acc: 0.9596\n",
      "Epoch 51/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0022 - acc: 1.0000Epoch 00050: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0023 - acc: 1.0000 - val_loss: 0.1497 - val_acc: 0.9560\n",
      "Epoch 52/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0017 - acc: 1.0000Epoch 00051: val_loss did not improve\n",
      "\n",
      "Epoch 00051: reducing learning rate to 3.199999980552093e-08.\n",
      "74/74 [==============================] - 28s - loss: 0.0017 - acc: 1.0000 - val_loss: 0.1177 - val_acc: 0.9633\n",
      "Epoch 53/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0021 - acc: 0.9996Epoch 00052: val_loss did not improve\n",
      "74/74 [==============================] - 28s - loss: 0.0021 - acc: 0.9996 - val_loss: 0.1187 - val_acc: 0.9596\n",
      "Epoch 54/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0046 - acc: 0.9983Epoch 00053: val_loss did not improve\n",
      "74/74 [==============================] - 27s - loss: 0.0045 - acc: 0.9983 - val_loss: 0.1106 - val_acc: 0.9651\n",
      "Epoch 55/500\n",
      "73/74 [============================>.] - ETA: 0s - loss: 0.0025 - acc: 0.9996Epoch 00054: val_loss did not improve\n",
      "74/74 [==============================] - 28s - loss: 0.0025 - acc: 0.9996 - val_loss: 0.1271 - val_acc: 0.9541\n",
      "Epoch 00054: early stopping\n",
      "\n",
      "-----------TEST-----------\n",
      "Found 1500 images belonging to 1 classes.\n",
      "1500/1500 [==============================] - 42s 28ms/step\n"
     ]
    }
   ],
   "source": [
    "k_fold = 5\n",
    "img_width, img_height = 299, 299\n",
    "nb_train_samples = 74       # steps_per_epoch\n",
    "nb_validation_samples = 18\n",
    "batch_size_train = 32\n",
    "batch_size_val = 32\n",
    "epochs = 500\n",
    "lr = 0.0001\n",
    "\n",
    "train_data_dir = '/home/jovyan/Kaggle_Exercise/where_am_i/KFOLD/train'\n",
    "validation_data_dir = \"/home/jovyan/Kaggle_Exercise/where_am_i/KFOLD/validation\"\n",
    "classes = os.listdir(train_data_dir)  # get each class\n",
    "\n",
    "class_split = []\n",
    "for class_ in classes:\n",
    "    tmp_list = os.listdir(os.path.join(train_data_dir, class_))\n",
    "    num_chunk = math.ceil(len(tmp_list)/k_fold)\n",
    "    chunk_list = [tmp_list[x:x+num_chunk]  for x in range(0, len(tmp_list), num_chunk) ]  \n",
    "    class_split.append(chunk_list)\n",
    "    \n",
    "dict_class_split = dict(zip(classes, class_split))\n",
    "\n",
    "\n",
    "    \n",
    "# create new folder and subfolders \n",
    "if os.path.isdir(validation_data_dir):\n",
    "    shutil.rmtree(validation_data_dir)\n",
    "os.makedirs(validation_data_dir)\n",
    "for con in classes:\n",
    "    os.makedirs(os.path.join(validation_data_dir, con))\n",
    "    \n",
    "# record \n",
    "loss = []\n",
    "val_loss = []\n",
    "acc = []\n",
    "val_acc = []\n",
    "y_predict_result = []\n",
    "    \n",
    "for k in range(k_fold):\n",
    "    print(\"We're in the fold: \", k)\n",
    "    # move files\n",
    "    for key, values in dict_class_split.items():\n",
    "        for value in values[k]:\n",
    "            shutil.move(train_data_dir+\"/\"+key+\"/\"+value , validation_data_dir+\"/\"+key+\"/\"+value)\n",
    "    \n",
    "    # Model\n",
    "    model = applications.inception_v3.InceptionV3(weights = \"imagenet\", include_top=False, input_shape = (img_width, img_height, 3))\n",
    "    \n",
    "    #Adding custom Layers \n",
    "    x = model.output\n",
    "    x = GlobalAveragePooling2D()(x) # GlobalAveragePooling2D 将 MxNxC 的张量转换成 1xC 张量，C是通道数\n",
    "    # x = Dense(1024,activation='relu')(x)\n",
    "    x = Dropout(0.5)(x)\n",
    "    predictions = Dense(15,activation='softmax')(x)\n",
    "    \n",
    "    model_final = Model(inputs = model.input, outputs = predictions)\n",
    "\n",
    "    #  optimizer\n",
    "    adam = optimizers.Adam(lr=lr, decay = 0.0)\n",
    "\n",
    "    # We add metrics to get more results you want to see\n",
    "    model_final.compile(optimizer=adam,   \n",
    "                  loss='categorical_crossentropy',\n",
    "                  metrics=['acc'])\n",
    "\n",
    "    # data augmentation\n",
    "    train_datagen = ImageDataGenerator(rescale = 1./255,\n",
    "                                   rotation_range = 7,\n",
    "                                   horizontal_flip = True,\n",
    "                                   height_shift_range = 0.05,\n",
    "                                   width_shift_range=0.03,\n",
    "                                   shear_range = 0.01,\n",
    "                                   zoom_range = 0.01)\n",
    "    val_datagen = ImageDataGenerator(rescale = 1./255)\n",
    "\n",
    "    # generator\n",
    "    train_generator = train_datagen.flow_from_directory(\n",
    "    train_data_dir,\n",
    "    target_size = (img_height, img_width),\n",
    "    batch_size = batch_size_train, \n",
    "    class_mode = \"categorical\",\n",
    "    shuffle=True)\n",
    "\n",
    "    validation_generator = val_datagen.flow_from_directory(\n",
    "    validation_data_dir,\n",
    "    target_size = (img_height, img_width),\n",
    "    batch_size = batch_size_val,\n",
    "    class_mode = \"categorical\",\n",
    "    shuffle=True)\n",
    "    \n",
    "    # ModelCheckpoint: 该回调函数将在每个epoch后保存模型到filepath \n",
    "    checkpoint = ModelCheckpoint(\"where_am_I_V3_5kfold_\"+str(k)+\".h5\", \n",
    "                                 monitor='val_loss', # 需要监视的值\n",
    "                                 verbose=1, \n",
    "                                 save_best_only=True, # 当设置为True时，将只保存在验证集上性能最好的模型\n",
    "                                 save_weights_only=False,  # 若设置为True，则只保存模型权重，否则将保存整个模型（包括模型结构，配置信息等）\n",
    "                                 mode='auto', # ‘auto’，‘min’，‘max’之一，在save_best_only=True时决定性能最佳模型的评判准则，\n",
    "                                     # 例如，当监测值为val_acc时，模式应为max，当检测值为val_loss时，模式应为min。\n",
    "                                     # 在auto模式下，评价准则由被监测值的名字自动推断。\n",
    "                                 period=1  # CheckPoint之间的间隔的epoch数\n",
    "                                )\n",
    "\n",
    "    # 当监测值不再改善时，该回调函数将中止训练\n",
    "    early = EarlyStopping(monitor='val_acc', \n",
    "                          min_delta=0.001, # an absolute change(of monitor value) of less than min_delta, will count as no improvement.\n",
    "                          patience=25, # 經過“patience”次\"no improvement\"後停止training\n",
    "                          verbose=2, \n",
    "                          mode='auto')\n",
    "\n",
    "    reduceLR = ReduceLROnPlateau(monitor='val_loss',\n",
    "                          factor=0.2,  # new_lr = lr * factor\n",
    "                          cooldown=0, patience=5, min_lr=1e-8, verbose=1)\n",
    "    \n",
    "    # Train the model \n",
    "    hist = model_final.fit_generator(\n",
    "    train_generator,\n",
    "    steps_per_epoch = nb_train_samples,\n",
    "    epochs = epochs,\n",
    "    validation_data = validation_generator,\n",
    "    validation_steps = nb_validation_samples,\n",
    "    callbacks = [checkpoint, early, reduceLR])\n",
    "    \n",
    "    # record\n",
    "    loss.append(hist.history[\"loss\"])\n",
    "    val_loss.append(hist.history[\"val_loss\"])\n",
    "    acc.append(hist.history[\"acc\"])\n",
    "    val_acc.append(hist.history[\"val_acc\"])\n",
    "    \n",
    "    # Test \n",
    "    print()\n",
    "    print(\"-----------TEST-----------\")\n",
    "    test_path = \"/home/jovyan/Kaggle_Exercise/where_am_i/test_data\"\n",
    "\n",
    "    test_datagen = ImageDataGenerator(rescale=1./255)\n",
    "    test_generator = test_datagen.flow_from_directory(\n",
    "    test_path,\n",
    "    target_size = (img_height, img_width),\n",
    "    class_mode = \"categorical\",\n",
    "    batch_size=1,\n",
    "    shuffle=False)\n",
    "\n",
    "    filenames = test_generator.filenames\n",
    "    nb_samples = len(filenames)\n",
    "\n",
    "    model = load_model(\"where_am_I_V3_5kfold_\"+str(k)+\".h5\")\n",
    "    y_predict = model.predict_generator(test_generator,steps = nb_samples, workers=1, verbose=1)\n",
    "    y_predict_result.append(y_predict)\n",
    "    \n",
    "    # move back\n",
    "    for key, values in dict_class_split.items():\n",
    "        for value in values[k]:\n",
    "            shutil.move(validation_data_dir+\"/\"+key+\"/\"+value, train_data_dir+\"/\"+key+\"/\"+value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# save \n",
    "import pickle\n",
    "with open(\"loss_kfold.txt\", \"wb\") as fp:   #Pickling\n",
    "    pickle.dump(loss, fp)\n",
    "    \n",
    "with open(\"acc_kfold.txt\", \"wb\") as fp:   #Pickling\n",
    "    pickle.dump(acc, fp)\n",
    "    \n",
    "with open(\"val_loss_kfold.txt\", \"wb\") as fp:   #Pickling\n",
    "    pickle.dump(val_loss, fp)\n",
    "    \n",
    "with open(\"val_acc_kfold.txt\", \"wb\") as fp:   #Pickling\n",
    "    pickle.dump(val_acc, fp)    \n",
    "    \n",
    "with open(\"y_predict_kfold.txt\", \"wb\") as fp:   #Pickling\n",
    "    pickle.dump(y_predict_result, fp)    \n",
    "# >>> with open(\"test.txt\", \"rb\") as fp:   # Unpickling\n",
    "# ...   b = pickle.load(fp)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 5, 10,  5, ...,  5,  0,  3])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from operator import add\n",
    "# tmp = list(map(sum, zip(y_predict_result[0],y_predict_result[1], y_predict_result[2], y_predict_result[3], y_predict_result[4], y_predict_result[5] )))\n",
    "tmp = list(map(add, y_predict_result[0],y_predict_result[1])) \n",
    "tmp = list(map(add, tmp,y_predict_result[2])) \n",
    "tmp = list(map(add, tmp,y_predict_result[3])) \n",
    "tmp = list(map(add, tmp,y_predict_result[4])) \n",
    "y_predict_label = np.argmax(tmp, axis=1)\n",
    "y_predict_label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "map_ = {0: 9,\n",
    "1: 7,\n",
    "2: 12,\n",
    "3: 10,\n",
    "4: 4,\n",
    "5: 14,\n",
    "6: 2,\n",
    "7: 3,\n",
    "8: 0,\n",
    "9: 5,\n",
    "10: 8,\n",
    "11: 6,\n",
    "12: 11,\n",
    "13: 1,\n",
    "14: 13}\n",
    "\n",
    "tmp2 = pd.DataFrame({\n",
    "    \"index\":y_predict_label.tolist()\n",
    "})\n",
    "y_predict_label_2 = tmp2[\"index\"].map(map_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['668c168032417601933bee0cf75cd840a9452e8f3d090c5c93a861c72a7c82f6.jpg',\n",
       " '72acbd0f4ff70d9862c458894c91964bc91c5ed053f61d5f15708142c5a12b99.jpg',\n",
       " '8acfa878262537dd57406f05bea8de7294060d5156a479882d3fd76f01d69c59.jpg',\n",
       " 'ed3173b67cfdac9c9dd026dcb25df4ea66bbad4526ae47598e4cf900031a7bc1.jpg',\n",
       " '78e2f3172eeed77e31ff5ce874cdb08b48038ea8e6c55ce3e84c81e904fa20ff.jpg',\n",
       " 'fc7e823de1c43d874c7ec3fb292e269a6a08484051a8664b65d2547fafe1d2f0.jpg',\n",
       " 'e983be29dbda9ae22c1d7821eaca2f696c28c76a705cd009693d2c183316bfdc.jpg',\n",
       " '0d683efdc1a45eaabeaaa0f04d1fbbde5532d03d45b766d7157b7191c2890b82.jpg',\n",
       " 'eec80f2ed567dda1feae8903265b150727b830a178ffe35a3fb4d113768537a5.jpg',\n",
       " '091e72ed1eb8b74b8258f74455f8950eeaaca1bd2166d9b2d1aafd6027596911.jpg']"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from os import listdir\n",
    "onlyfiles = [f for f in listdir(test_path+\"/testset\")]\n",
    "# onlyfiles = listdir(test_path+\"/testset\")\n",
    "onlyfiles[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['668c168032417601933bee0cf75cd840a9452e8f3d090c5c93a861c72a7c82f6',\n",
       " '72acbd0f4ff70d9862c458894c91964bc91c5ed053f61d5f15708142c5a12b99',\n",
       " '8acfa878262537dd57406f05bea8de7294060d5156a479882d3fd76f01d69c59',\n",
       " 'ed3173b67cfdac9c9dd026dcb25df4ea66bbad4526ae47598e4cf900031a7bc1',\n",
       " '78e2f3172eeed77e31ff5ce874cdb08b48038ea8e6c55ce3e84c81e904fa20ff',\n",
       " 'fc7e823de1c43d874c7ec3fb292e269a6a08484051a8664b65d2547fafe1d2f0',\n",
       " 'e983be29dbda9ae22c1d7821eaca2f696c28c76a705cd009693d2c183316bfdc',\n",
       " '0d683efdc1a45eaabeaaa0f04d1fbbde5532d03d45b766d7157b7191c2890b82',\n",
       " 'eec80f2ed567dda1feae8903265b150727b830a178ffe35a3fb4d113768537a5',\n",
       " '091e72ed1eb8b74b8258f74455f8950eeaaca1bd2166d9b2d1aafd6027596911']"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "file_name=[]\n",
    "for text in onlyfiles:\n",
    "    tmp = text.rstrip(\".jpg\")\n",
    "    file_name.append(tmp)\n",
    "file_name[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "submit = pd.DataFrame({\n",
    "    \"id\":file_name,\n",
    "    \"class\":y_predict_label_2.values.tolist()\n",
    "})\n",
    "submit.to_csv('submit_v3_5kfold.csv',index=False)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TRY Aother combination\n",
    "tmp = np.concatenate((y_predict_result[0],y_predict_result[1],y_predict_result[2],y_predict_result[3],y_predict_result[4]), axis=1)\n",
    "y_predict_label = np.argmax(tmp, axis=1)\n",
    "y_predict_label = y_predict_label%15"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "map_ = {0: 9,\n",
    "1: 7,\n",
    "2: 12,\n",
    "3: 10,\n",
    "4: 4,\n",
    "5: 14,\n",
    "6: 2,\n",
    "7: 3,\n",
    "8: 0,\n",
    "9: 5,\n",
    "10: 8,\n",
    "11: 6,\n",
    "12: 11,\n",
    "13: 1,\n",
    "14: 13}\n",
    "\n",
    "tmp2 = pd.DataFrame({\n",
    "    \"index\":y_predict_label.tolist()\n",
    "})\n",
    "y_predict_label_2 = tmp2[\"index\"].map(map_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "submit = pd.DataFrame({\n",
    "    \"id\":file_name,\n",
    "    \"class\":y_predict_label_2.values.tolist()\n",
    "})\n",
    "submit.to_csv('submit_v3_5kfold-2.csv',index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x504 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(15,7))\n",
    "ax1 = fig.add_subplot(121)\n",
    "for i in range(5):\n",
    "    ax1.plot(loss[i], label = \"loss\"+str(i+1))\n",
    "    ax1.plot(val_loss[i], label=\"val_loss\"+str(i+1))\n",
    "\n",
    "plt.ylabel('loss')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend()\n",
    "\n",
    "ax2 = fig.add_subplot(122)\n",
    "for i in range(5):\n",
    "    ax2.plot(acc[i], label = \"acc\"+str(i+1))\n",
    "    ax2.plot(val_acc[i], label = \"val_acc\"+str(i+1))\n",
    "\n",
    "plt.ylabel('acc')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend()\n",
    "\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}